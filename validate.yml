 Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

<<<<<<< HEAD
resources:
- repo: self

stages:
- stage: Validate
  jobs:
  - job: Validate
    continueOnError: false
    steps:
    - publish: 1-terraform
      artifact: terraform_out
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Use Terraform v0.12.6'
      inputs:
        terraformVersion: 0.12.6
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        workingDirectory: 1-terraform
        backendType: azurerm
        backendServiceArm: 'AksTerraformSPN'
        backendAzureRmResourceGroupName: 'AKSTerraform-RG'
        backendAzureRmStorageAccountName: 'dbsaccount'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'demo.terraform.tfstate'
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform validate'
      inputs:
        command: validate
        workingDirectory: 1-terraform

=======
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
>>>>>>> fb035c8f02b77bd44111aa9ad154135a6620a13a
